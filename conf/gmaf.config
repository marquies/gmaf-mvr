# configuration file of the Generic Multimedia Annotation Framework
# empty lines and lines with comments are ignored
#
# Stefan Wagenpfeil, 16.02.2021

# you can point this property to any folder on your local machine, where your collection is stored. 
# If not changed, there will be a folder named 'collection' created relative to the location, 
# where you start the GMAF. If you want to add multiple locations to your collection, you can 
# comma-separate their paths, e.g. collection1,collection2,...
collectionPath = collection
#collectionPath = med_collection

# name of your collection
collectionName = MyAssets

# API_Key for remote access
api_key = stw476

# this path points to the folder, where the GraphCodes for the Multimedia assets are stored. 
# If not changed, the GMAF will create a folder named 'graphcodes' relative to the location, 
# where you start it from. If you change this parameter, make sure to move all existing GraphCodes 
# to the new location. Otherwise, the GMAF will re-process every asset
graphCodeRepository = graphcodes

# this path points to the folder, where MMFGs are stored
mmfgRepository = mmfgs

# folder, where exported files, e.g. GraphML files should be written to
exportFolder = export

# folder, where processing flows are defined
processingFlowFolder = flows

# folder, where temporary thumbnails are stored
thumbnailFolder = thumbnails

# for which file extensions should the GMAF look for
fileExtensions = jpg,jpeg,png,bmp,gif,json,wapo,xml,docx,txt

# number of max recursions for the GMAF processing
maxRecursions = 3

# number of maximum nodes for a MMFG
maxNodes = 500

# UI mode (dark | light)
uiMode = dark

# set to "true", if all assets of the collection should be processed automatically, otherwise "false"
autoProcess = false

# define the adapter-class for an external semantic system 
semanticExtension = de.swa.gmaf.extensions.defaults.DefaultExtension

# should an internal SOAP Server be started for the API
serverPort = 8481
serverName = localhost
launchServer = true

# Collection-Processor-Class for vertical scaling support
collectionProcessor = de.swa.gc.processing.DefaultCollectionProcessor
collectionProcessorConfig = de.swa.ui.panels.config.NvidiaCUDAConfig

# Query Explanation
queryExplainerClass = de.swa.fuh.explanation.MainExplanation

# RDF Extension
rdfRepository = rdf